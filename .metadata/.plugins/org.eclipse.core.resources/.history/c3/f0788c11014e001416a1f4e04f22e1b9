package testRemote;

import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;

import lejos.hardware.BrickFinder;
import lejos.hardware.BrickInfo;
import lejos.hardware.Sound;
import lejos.hardware.lcd.TextLCD;
import lejos.remote.ev3.RMIRegulatedMotor;
import lejos.remote.ev3.RemoteEV3;
import lejos.utility.Delay;

public class testRemote {

	public static void main (String[] args) throws NotBoundException, IOException {
		
		
		RemoteEV3 ev3 = new RemoteEV3("10.0.1.1");
		Sound.beep();
		Sound.beep();
		TextLCD lcd = ev3.getTextLCD();
		ev3.setDefault();
		lcd.clear();
		lcd.drawString("Connected", 0, 1);
		RMIRegulatedMotor a=ev3.createRegulatedMotor("A", 'N');
		RMIRegulatedMotor b=ev3.createRegulatedMotor("B", 'N');
		RMIRegulatedMotor c=ev3.createRegulatedMotor("C", 'N');
		double[] motorSpeeds=new double[3]; //a,b,c
		double[] cartSpeeds=new double[3]; // Vx,Vy,Rxy
		double[][] transformation1 = {{0, 27.7778, -1.2639}, {24.0563, -13.8889, -1.2639}, {-24.0563, -13.8889, -1.2639}};
		
		cartSpeeds[0]=-0.2;
		cartSpeeds[1]=0;
		cartSpeeds[2]=0;
		System.out.println("Cartesian Speeds= {"+cartSpeeds[0]+", "+cartSpeeds[1]+", "+cartSpeeds[2]+"} m/s");
		motorSpeeds=transformCartSpeedstoMotorSpeeds(cartSpeeds,transformation1);
		System.out.println("Motor Speeds= {"+motorSpeeds[0]+", "+motorSpeeds[1]+", "+motorSpeeds[2]+"} degrees/s");
		setMotorSpeeds(a,b,c,motorSpeeds);
		Delay.msDelay(3000);
		System.out.println((int)Math.round(motorSpeeds[2]));
		
		a.close();
		b.close();
		c.close();
	}

	private static void setMotorSpeeds(RMIRegulatedMotor a,RMIRegulatedMotor b,RMIRegulatedMotor c,double[] motorSpeeds) throws RemoteException{
		int aSpeed=(int) Math.round(motorSpeeds[0]);
		int bSpeed=(int) Math.round(motorSpeeds[1]);
		int cSpeed=(int) Math.round(motorSpeeds[2]);
		
		a.setSpeed(aSpeed);
		b.setSpeed(bSpeed);
		c.setSpeed(cSpeed);
		
		if(aSpeed>=0)a.forward(); else a.backward();
		if(bSpeed>=0)b.forward(); else b.backward();
		if(cSpeed>=0)c.forward(); else c.backward();
		
		
	}

	
	private static double[] transformCartSpeedstoMotorSpeeds(double[] cartSpeeds, double[][] transformation){
		double[] motorSpeeds=new double[3];
		for(int i=0;i<3;i++){
			motorSpeeds[i]=0;
		}
		for(int i=0;i<3;i++){
			motorSpeeds[0]+=transformation[0][i]*cartSpeeds[i];
			motorSpeeds[1]+=transformation[1][i]*cartSpeeds[i];
			motorSpeeds[2]+=transformation[2][i]*cartSpeeds[i];
		}
		for(int i=0;i<3;i++){
			motorSpeeds[i]=(double) Math.toDegrees(motorSpeeds[i]);
		}
		return motorSpeeds;
	}
}